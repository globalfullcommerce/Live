<?php // SEARCH ?>
<?php $catalogSearchHelper =  $this->helper('catalogsearch'); ?>
<script type="text/javascript">
//<![CDATA[
    var searchForm = new Varien.searchForm('search_mini_form', 'search', '');
    searchForm.initAutocomplete('<?php echo $catalogSearchHelper->getSuggestUrl() ?>', 'search_autocomplete');
    var newsletterSubscriberFormDetail = new VarienForm('newsletter-validate-detail');

    truncateOptions();
    decorateList('cart-sidebar', 'none-recursive');
    $j('document').ready(function() {
        var minicartOptions  = {
            formKey:           "<?php echo $this->getFormKey();?>"
        }
        var Mini = new Minicart(minicartOptions);
        Mini.init();
    });

    <?php // PRODUCT PAGE ?>
    <?php if (Mage::registry('product')): ?>
	var productAddToCartForm = new VarienForm('product_addtocart_form');
            productAddToCartForm.submit = function(button, url) {
                if (this.validator.validate()) {
                    var form = this.form;
                    var oldUrl = form.action;

                    if (url) {
                       form.action = url;
                    }
                    var e = null;
                    try {
                        this.form.submit();
                    } catch (e) {
                    }
                    this.form.action = oldUrl;
                    if (e) {
                        throw e;
                    }

                    if (button && button != 'undefined') {
                        button.disabled = true;
                    }
                }
            }.bind(productAddToCartForm);

            productAddToCartForm.submitLight = function(button, url){
                if(this.validator) {
                    var nv = Validation.methods;
                    delete Validation.methods['required-entry'];
                    delete Validation.methods['validate-one-required'];
                    delete Validation.methods['validate-one-required-by-name'];
                    // Remove custom datetime validators
                    for (var methodName in Validation.methods) {
                        if (methodName.match(/^validate-datetime-.*/i)) {
                            delete Validation.methods[methodName];
                        }
                    }

                    if (this.validator.validate()) {
                        if (url) {
                            this.form.action = url;
                        }
                        this.form.submit();
                    }
                    Object.extend(Validation.methods, nv);
                }
            }.bind(productAddToCartForm);

            <?php if($this->getJsonConfig()): ?>
            var optionsPrice = new Product.OptionsPrice(<?php echo $this->getJsonConfig() ?>);
            <?php endif; ?>

           <?php endif; ?>

//]]>
</script>


<?php // TRANSLATOR ?>
<?php echo $this->helper('core/js')->getTranslatorScript() ?>




<?php // CART PAGE ONLY ?>

<script type="text/javascript">
//<![CDATA[
    $('region_id').setAttribute('defaultValue',  "<?php echo $this->getEstimateRegionId() ?>");
    new RegionUpdater('country', 'region', 'region_id', <?php echo $this->helper('directory')->getRegionJson() ?>);
    var coShippingMethodForm = new VarienForm('shipping-zip-form');
            var countriesWithOptionalZip = <?php echo $this->helper('directory')->getCountriesWithOptionalZip(true) ?>;

            coShippingMethodForm.submit = function () {
                var country = $F('country');
                var optionalZip = false;

                for (i=0; i < countriesWithOptionalZip.length; i++) {
                    if (countriesWithOptionalZip[i] == country) {
                        optionalZip = true;
                    }
                }
                if (optionalZip) {
                    $('postcode').removeClassName('required-entry');
                }
                else {
                    $('postcode').addClassName('required-entry');
                }
                return VarienForm.prototype.submit.bind(coShippingMethodForm)();
    }
//]]>
</script>